"""
Author: Nicole Wang
Date: Updated June 2025

This script simulates block tower trials using a physics engine and trains a machine learning model to predict tower stability based on block positions.
"""

import csv
import random
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt

# from blocktower import BlockTower  # Uncomment if you have the physics engine implemented

# Parameters
NUM_TRIALS = 200
X_MEAN = 300
X_SD = 30
CSV_FILENAME = "block_tower_results.csv"

# Simulated placeholder for block tower engine (remove if using real BlockTower class)
class BlockTower:
    def __init__(self, x_positions):
        self.x_positions = x_positions

    def run_person(self):
        # Simulate: towers with tight alignment are more stable
        spread = np.std(self.x_positions)
        prediction = spread < 18
        outcome = prediction if random.random() > 0.2 else not prediction  # Add noise
        return prediction, outcome

# Generate random x-positions
def generate_x_positions():
    return [int(random.gauss(X_MEAN, X_SD)) for _ in range(6)]

# Run the simulation and collect data
def run_experiment():
    features = []
    labels = []

    with open(CSV_FILENAME, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["Trial", "X_Positions", "Prediction", "Outcome"])

        for trial in range(1, NUM_TRIALS + 1):
            x_positions = generate_x_positions()
            tower = BlockTower(x_positions)
            prediction, outcome = tower.run_person()

            features.append(x_positions)
            labels.append(int(outcome))

            writer.writerow([trial, x_positions, int(prediction), int(outcome)])
            print(f"Trial {trial}: Prediction={prediction}, Outcome={outcome}")

    print(f"\nSimulation complete. Results saved to {CSV_FILENAME}")
    return np.array(features), np.array(labels)

# Train and evaluate a simple ML model
def train_and_evaluate_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LogisticRegression()
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)

    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")

    return model

# Main function
def main():
    X, y = run_experiment()
    model = train_and_evaluate_model(X, y)

if __name__ == "__main__":
    main()
